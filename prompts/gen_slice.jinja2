Hey there, thank you for lending your expertise in crafting the unit test. I'm reaching out to seek your assistance in breaking down the method under test into multiple slices, each aimed at completing a specific subtask. This slicing approach is crucial to streamline the design process for our test cases. When we're designing unit tests, it's essential to focus solely on covering specific slices.

Below, I'll provide you with all the necessary information for this decomposition process. First, I'll present the basic details about the method under test, including its source code and dependencies (i.e., the methods and fields it invokes). Following that, I'll outline instructions on how to decompose the method into multiple slices, each corresponding to a subtask. Finally, I'll specify the desired format for your output.

### Basic Information of the Method under Test and Its Dependencies

The focal method is `{{ focal_method }}` within the focal class `{{ class_name }}`. Here's the source code snippet of the focal class, covering all its fields and member methods:
```
{{ full_fm }}
```

For other member methods, I'll provide only their signatures.
{% for key, value in c_deps.items() %}
Brief information about the dependent class `{{ key }}` is as follows:
```
{{ value }}
```
{% endfor %}
{% for key, value in m_deps.items() %}
Brief information about the dependent method `{{ key }}` is as follows:
```
{{ value }}
```
{% endfor %}

### Instructions on Decomposing the Method under Test into Slices

As per our system settings plan, please proceed with the following steps:

1. Summarize the focal method.
2. List the test environment settings required for running the focal method, including:
    - Enumerating all input parameters and object/class fields invoked in the focal method that need to be set or mocked.
    - Enumerating all object/class methods invoked in the focal method that need to be set or mocked.
3. Important Note! Please decompose the solution program into multiple problem-solving steps according to the semantics. Each step should represent a slice of the method under test and accomplish a subtask.
    - We allow the slices to be hierarchical
    - Your analysis has two parts:
        a. describe the subtask of the slice;
        b. replicate the corresponding original code statements
4. Organize the hierarchical slices into a reformatted structure.
    - For example, if we have 4 slices A, B, C and D. Slice A contains slice B and slice C, and slice D are siblings of slice A. Reformat them as follows
    {slice A}.{slice B}: {description of the subtask to accomplish in the reformat} {corresponding original code statements}
    {slice A}.{slice C}: {description of the subtask to accomplish in the reformat} {corresponding original code statements}
    {slice D}: {description of the subtask to accomplish in the reformat} {corresponding original code statements}

### Format of the Output

Begin by performing the analysis in text format. Once the analysis is complete, organize the findings into a JSON object, structured as follows:

- "summarization": A string summarizing the focal method.
- "invoked_outside_vars": A JSON array of strings listing global variables, focal method parameters, and member methods used in the focal method that require setting or mocking.
- "invoked_outside_methods": A JSON array of strings listing external methods invoked by the focal method that require setting or mocking.
- "steps": A JSON array of JSON Objects. One object is a slice in Step 4. One object has two key value pairs:
    - key: "desp"; value: a string of the slice's description
    - key: "code"; value: a string of the original code statements within the slice

Here's an example output format for your analysis:

```json
{
    "summarization": "...",
    "//": "Local variables defined in the focal method should not be reported.",
    "invoked_outside_vars": [
        "input_str: string, input parameter, the input string to handle",
        "code.format: public string, public class field of object 'code' of class Encoding, representing the format to encode the input string",
        "..."
    ],
    "invoked_outside_methods": [
        "parser.norm(string): public member method of object 'parser' of class 'Parser', responsible for normalizing the input string",
        "..."
    ],
    "steps": [
        {"desp": "Initialization and setup\n    - Initialize an empty list of tokens.\n    - Initialize a boolean flag `eatTheRest` to false.",
         "code": "    ArrayList&lt;String&gt; tokens = new List();\n boolean eatTheRest = false;\n"}
        {"desp": "...", "code": "..."},
        ...
    ]
}
```